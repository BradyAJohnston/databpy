# named_attribute { #databpy.named_attribute }

```python
named_attribute(obj, name='position', evaluate=False)
```

Get the named attribute data from the object.

## Parameters {.doc-section .doc-section-parameters}

| Name     | Type                                                           | Description                                                     | Default      |
|----------|----------------------------------------------------------------|-----------------------------------------------------------------|--------------|
| obj      | [bpy](`bpy`).[types](`bpy.types`).[Object](`bpy.types.Object`) | The Blender object.                                             | _required_   |
| name     | [str](`str`)                                                   | The name of the attribute, by default 'position'.               | `'position'` |
| evaluate | [bool](`bool`)                                                 | Whether to evaluate modifiers before reading, by default False. | `False`      |

## Returns {.doc-section .doc-section-returns}

| Name   | Type                                     | Description                          |
|--------|------------------------------------------|--------------------------------------|
|        | [np](`numpy`).[ndarray](`numpy.ndarray`) | The attribute data as a numpy array. |

## Raises {.doc-section .doc-section-raises}

| Name   | Type                               | Description                                        |
|--------|------------------------------------|----------------------------------------------------|
|        | [AttributeError](`AttributeError`) | If the named attribute does not exist on the mesh. |

## Examples {.doc-section .doc-section-examples}

```{python}
import bpy
from databpy import named_attribute, list_attributes
obj = bpy.data.objects["Cube"]
print(f"{list_attributes(obj)=}")
```
```{python}
named_attribute(obj, "position")
```